///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////Car tracking project with laser_radar_data_fusion/////////////////////////////////////////
//////////////////////////////////////////////////////////////////////Copyright 2009-10 Akihiro Takeuchi///////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////detect.cpp   Detect car from an image  ///////////////////////////////////////////////////////////////////////


//OpenCV library
//#include "cv.h"			
//#include "cxcore.h"
//#include "highgui.h"	
/*
#include "C:\OpenCV2.0\include\opencv\cv.h"
#include "C:\OpenCV2.0\include\opencv\highgui.h"
#include "C:\OpenCV2.0\include\opencv\cxcore.h"
*/
#include "cv.h"
#include "highgui.h"
#include "cxcore.h"
#ifdef _DEBUG
    //Debugモードの場合
    #pragma comment(lib,"cv200d.lib") 
    #pragma comment(lib,"cxcore200d.lib") 
    #pragma comment(lib,"cvaux200d.lib") 
    #pragma comment(lib,"highgui200d.lib") 
#else
    //Releaseモードの場合
    #pragma comment(lib,"cv200.lib") 
    #pragma comment(lib,"cxcore200.lib") 
    #pragma comment(lib,"cvaux200.lib") 
    #pragma comment(lib,"highgui200.lib") 
#endif
//C++ library
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <legacy.hpp>

//ORIGINAL header files
#include "MODEL_info.h"		//File information
#include "detect_func.h"	//functions
#include "Common.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//definiton of functions//

//resize Image (IplImage)
IplImage *ipl_resize(IplImage *IM,double ratio);

//create and resize Iplimage 
IplImage *ipl_cre_resize(IplImage *IM,int width,int height);

//initialize accumulated score
double *ini_ac_score(IplImage *IM);

//detect object and return rectangle-box coorinate (extended to main.cpp)
double *detect(IplImage *IM,MODEL *MO,double thresh,int *D_NUMS,double *A_SCORE);

//detect car-boundary-boxes
RESULT *car_detection(IplImage *IM,MODEL *MO,double thresh,int *D_NUMS,double *A_SCORE,double overlap);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//resize Image (IplImage)
IplImage *ipl_resize(IplImage *IM,double ratio)
{
	IplImage *R_I;	//Output (Resized Image)

	//parameters 
	const int height = IM->height;
	const int width = IM->width;

	const int UpY = height/10;
	const int NEW_Y = height-UpY-height/10;
	
	const int depth = IM->depth;
	const int nChannels = IM->nChannels;

	//set ROI
	CvRect REC = cvRect(0,UpY,width,NEW_Y);
	cvSetImageROI(IM,REC);			//change ROI of Image 

	if((int)((double)IM->height*ratio)==IM->height)
	{
		R_I =cvCreateImage(cvSize(width,NEW_Y),depth,nChannels);
		cvCopy(IM,R_I);		//copy
	}
	else
	{
		R_I = cvCreateImage(cvSize((int)((double)width*ratio),(int)((double)NEW_Y*ratio)),depth,nChannels);
		cvResize(IM,R_I);	//resize
	}
	cvResetImageROI(IM);
	//printf("ORIGINAL Image size [%d %d]\n",R_I->height,R_I->width);  

	return(R_I);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
IplImage *ipl_cre_resize(IplImage *IM,int width,int height)
{
	IplImage *R_I = cvCreateImage(cvSize(width,height),IM->depth,IM->nChannels);
	cvResize(IM,R_I);	//resize
	return(R_I);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//initialize accumulated score
double *ini_ac_score(IplImage *IM)
{
	int L = IM->height*IM->width;
	double *A_SCORE = (double *)calloc(L,sizeof(double));
	for(int ii=0;ii<L;ii++) *(A_SCORE+ii)=-100.0;
	return (A_SCORE);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//detect and save detected boxes
double *detect(IplImage *IM,MODEL *MO,double thresh,int *D_NUMS,double *A_SCORE)
{
	//for time measurement
	clock_t t1,t2,t3;

	//initialize scale information for hierachical detection
	double *scales=ini_scales(MO->MI,IM,IM->width,IM->height);

	//initialize feature-size matrix
	int *featsize=ini_featsize(MO->MI);
	//calculate feature pyramid
	t1=clock();
	double **feature=calc_f_pyramid(IM,MO->MI,featsize,scales);		
	t2=clock();
	//detect boundary boxes
	double *boxes = get_boxes(feature,scales,featsize,MO,D_NUMS,A_SCORE,thresh);
	t3=clock();


	s_free(scales);						//release scale-information
	s_free(featsize);					//release feat size information
	free_features(feature,MO->MI);

	return boxes;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//detect car-boundary-boxes
RESULT *car_detection(IplImage *IM,MODEL *MO,double thresh,int *D_NUMS,double *A_SCORE,double overlap)
{
	double *boxes = detect(IM,MO,thresh,D_NUMS,A_SCORE);	//detect high-score region
	double *rects = nms(boxes,overlap,D_NUMS,MO);			//get boundary-rectangles of car
	RESULT *CUR = get_new_rects(IM,MO,rects,D_NUMS);		//get current result

	s_free(boxes);
	s_free(rects);

	return CUR;
}
